<?xml version="1.0" encoding="UTF-8" ?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/XDOC/2.0"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>OpenMM Java Classes</title>
    <author email="michael-schnieders@uiowa.edu">Michael J. Schnieders</author>
  </properties>
  <body>
    <section name="Overview">
      <p>
        Force Field X (FFX) integrates <a href="https://openmm.org" target="_blank">OpenMM</a> through a set of Java
        classes that are analogues of the OpenMM C++ API. This module documents how to depend on, initialize,
        and use the Java wrappers for OpenMM within FFX or your own Java projects.
      </p>
      <p>
        Lower-level wrappers around the C API are automatically generated using Jnaerator and are available on GitHub:
        <a href="https://github.com/SchniedersLab/jopenmm" target="_blank">Java Wrappers for the OpenMM C API (jopenmm)</a>.
      </p>
    </section>

    <section name="Maven Dependency">
      <p>
        Include the OpenMM Java wrappers via Maven. The fat artifact bundles the native binaries and plugins for common
        platforms to simplify setup:
      </p>
      <subsection name="Dependency">
        <source>
          <![CDATA[
<dependency>
  <groupId>edu.uiowa.jopenmm</groupId>
  <artifactId>jopenmm-fat</artifactId>
  <version>8.3.4</version>
</dependency>
          ]]>
        </source>
      </subsection>
      <p>
        For advanced users interested in slimmer artifacts or platform-specific binaries, see the jopenmm project page.
      </p>
    </section>
    <section name="Initialization and Plugins">
      <p>
        Before using any OpenMM APIs, initialize the library with OpenMMUtils. This extracts the bundled native libraries
        to a temporary directory and configures JNA to find them:
      </p>
      <source>
OpenMMUtils.init();
      </source>
      <p>
        To load OpenMM libraries and plugins (e.g., for additional platforms or forces):
      </p>
      <source>
String libDirectory = OpenMMUtils.getLibDirectory();
StringArray libs = Platform.loadPluginsFromDirectory(libDirectory);
String pluginDirectory = OpenMMUtils.getPluginDirectory();
StringArray plugins = Platform.loadPluginsFromDirectory(pluginDirectory);
      </source>
      <p>
        To create a platform instance, use the Platform class.
      </p>
      <source>
Platform platform = new Platform("CUDA");
      </source>
    </section>
  </body>
</document>
