#!/bin/sh

################################################################################
# Title: Force Field X.
# 
# Description: Force Field X - Software for Molecular Biophysics.
# 
# Copyright: Copyright (c) Michael J. Schnieders 2001-2020.
# 
# This file is part of Force Field X.
# 
# Force Field X is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3 as published by
# the Free Software Foundation.
# 
# Force Field X is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# Force Field X; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA
# 
# Linking this library statically or dynamically with other modules is making a
# combined work based on this library. Thus, the terms and conditions of the
# GNU General Public License cover the whole combination.
# 
# As a special exception, the copyright holders of this library give you
# permission to link this library with independent modules to produce an
# executable, regardless of the license terms of these independent modules, and
# to copy and distribute the resulting executable under terms of your choice,
# provided that you also meet, for each linked independent module, the terms
# and conditions of the license of that module. An independent module is a
# module which is not derived from or based on this library. If you modify this
# library, you may extend this exception to your version of the library, but
# you are not obligated to do so. If you do not wish to do so, delete this
# exception statement from your version.
################################################################################

BASEDIR=`dirname $0`/..
BASEDIR=`(cd "$BASEDIR"; pwd)`
ARCH=`uname -m||arch`

case "$ARCH" in
    x86_64 | ia64 | s390 )
	BIT=64
	;;
    * )
	BIT=32
	;;
esac


# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  Darwin*) darwin=true
           if [ -z "$JAVA_VERSION" ] ; then
             JAVA_VERSION="CurrentJDK"
           else
             echo "Using Java version: $JAVA_VERSION"
           fi
           if [ -z "$JAVA_HOME" ] ; then
             JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/${JAVA_VERSION}/Home
           fi
           ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] && CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# If a specific java binary isn't specified search for the standard 'java' binary
if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD=`which java`
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly."
  echo "  We cannot execute $JAVACMD"
  exit 1
fi

if [ -z "$REPO" ]
then
  REPO="$BASEDIR"
fi

if [ "$CLASSPATH_PREFIX" != "" ]; then
    CLASSPATH=$CLASSPATH_PREFIX:"$BASEDIR"/bin/ffx-all.jar
else
    CLASSPATH="$BASEDIR/bin/ffx-all.jar"
fi
JLP=modules/numerics/src/main/java/ffx/numerics/fft

JVM_MEM="4G"
if [ ! -z "$FFX_MEMORY" ]; then
  JVM_MEM="$FFX_MEMORY"
fi

EXTRA_JVM_ARGUMENTS="-Xms${JVM_MEM} -Xmx${JVM_MEM} -Xss1M"

if [ -z $TMPDIR ]; then
    if [ -z $TMP ]; then
        :
    else
        EXTRA_JVM_ARGUMENTS="-Djava.io.tmpdir=${TMP} ${EXTRA_JVM_ARGUMENTS}"
    fi
else
    EXTRA_JVM_ARGUMENTS="-Djava.io.tmpdir=${TMPDIR} ${EXTRA_JVM_ARGUMENTS}"
fi

awkCmd=`which awk`
sedCmd=`which sed`
hasAwkSed=''

if [ -x "$awkCmd" ]; then
    if [ -x "$sedCmd" ]; then
        hasAwkSed='1'
    fi
fi

# Detect JDK version; disallow JDKs below 1.8 and above 13.
if [ $hasAwkSed ]; then
    JVERS="`java -version 2>&1 | awk '/version/ {print $3;}' | sed 's/\"//g'`"
    JVFIRST="`echo "$JVERS" | awk 'BEGIN { FS = "[.-]"; } { print $1 }'`"
    JVSEC="`echo "$JVERS" | awk 'BEGIN { FS = "."; } { print $2 }'`"

    USE_EXPTL_FLAGS=''
    if [ $JVFIRST -gt 13 ]; then
        echo " Illegal Java version detected (${JVERS}). Please use JDK 1.8 through JDK 13." 1>&2
#       exit 1
    elif [ $JVFIRST -eq 9 ]; then
        USE_EXPTL_FLAGS='1'
    elif [ $JVFIRST -eq 10 ]; then
        USE_EXPTL_FLAGS='1'
    elif [ $JVFIRST -eq 11 ]; then
        USE_EXPTL_FLAGS='1'
    elif [ $JVFIRST -eq 12 ]; then
        USE_EXPTL_FLAGS='1'
    elif [ $JVFIRST -eq 13 ]; then
        USE_EXPTL_FLAGS='1'
    elif [ $JVSEC -lt 8 ]; then
        echo " Illegal Java version detected (${JVERS}). Please use JDK 1.8 through JDK 13." 1>&2
        exit 1
    fi

    if [ $USE_EXPTL_FLAGS ]; then
        EXTRA_JVM_ARGUMENTS="${EXTRA_JVM_ARGUMENTS} --illegal-access=permit --add-opens=java.desktop/java.awt=ALL-UNNAMED --add-exports=java.base/java.lang=ALL-UNNAMED --add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.desktop/sun.java2d=ALL-UNNAMED"
    fi

    nvccComm='which nvcc'
    hasNVCC=''
    if [ -x "$nvccComm" ]; then
	hasNVCC='1'
    fi
    if [ $hasNVCC ]; then
      CVERS="`nvcc --version`"
      if [ ! -z "$CVERS" ]; then
        CVERS="`echo "$CVERS" | awk '/release/ {print $5;}' | sed -e 's/,//'`"
        NVFIRST="`echo "$CVERS" | awk 'BEGIN { FS = ".";} { print $1; }'`"
        NVSEC="`echo "$CVERS" | awk 'BEGIN { FS = ".";} { print $2; }'`"
        if [ $NVFIRST -gt 10 ]; then
          echo " Illegal CUDA toolkit version detected (${CVERS}). Please use CUDA toolkit 10.1 if you wish to use CUDA-accelerated OpenMM calculations"
        elif [ $NVFIRST -lt 10 ]; then
          echo " Illegal CUDA toolkit version detected (${CVERS}). Please use CUDA toolkit 10.1 if you wish to use CUDA-accelerated OpenMM calculations"
        elif [ $NVSEC -ne 1 ]; then
          echo " Illegal CUDA toolkit version detected (${CVERS}). Please use CUDA toolkit 10.1 if you wish to use CUDA-accelerated OpenMM calculations"
        fi
      fi
    fi
else
    echo " The JRE and CUDA toolkit versions could not be autodetected. Please use JDK 1.8 through JDK 13 and (optionally) CUDA toolkit 10.1."
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$CLASSPATH" ] && CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$HOME" ] && HOME=`cygpath --path --windows "$HOME"`
  [ -n "$BASEDIR" ] && BASEDIR=`cygpath --path --windows "$BASEDIR"`
  [ -n "$REPO" ] && REPO=`cygpath --path --windows "$REPO"`
  echo " Java exec: $JAVACMD"
  echo " Classpath: $CLASSPATH"
fi

EXTRA_JVM_ARGUMENTS="${EXTRA_JVM_ARGUMENTS}"

exec "$JAVACMD" $JAVA_OPTS \
  $EXTRA_JVM_ARGUMENTS \
  -classpath "$CLASSPATH" \
  -Djava.library.path="$JLP" \
  -Djava.awt.headless="true" \
  -Dj3d.rend="noop" \
  -Dapp.name="Force Field X" \
  -Dapp.pid="$$" \
  -Dapp.repo="$REPO" \
  -Dbasedir="$BASEDIR" \
  ffx.Main \
  "$@"
